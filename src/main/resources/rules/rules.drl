package rules
import com.javainuse.model.Product;
import com.javainuse.model.Order;
import com.javainuse.model.Payment;
import com.javainuse.model.Discount;
import com.javainuse.model.ProductCategory;
import com.javainuse.model.Campaign;
import com.javainuse.model.OrderItem;
import com.javainuse.model.ProductAttribute;
import com.javainuse.model.CampaignBody;
import com.javainuse.model.CampaignFilter;
import com.javainuse.model.BenefitType;
import com.javainuse.model.PaymentMethod;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.lang.Double;

function java.lang.Double calculateDiscount(Double price, CampaignBody campaign, int size){
    // access user's double[] and calculate the sum, do the test
    Double itemDiscount = 0.0;
    if (campaign.getBenefitType() == BenefitType.CASH){
        itemDiscount = campaign.getBenefitAmount() / size;
    }else if (campaign.getBenefitType() == BenefitType.PERCENT){
        itemDiscount = price * campaign.getBenefitAmount() / 100;
    }
    return itemDiscount;
}

function Long getCurrentTime(){
    return System.currentTimeMillis();
}

// Tüm ürünlere uygulanan kampanya (benefit tipi, miktar limiti ve ödeme metodu filtersi dahildir)
rule "Rule for campaigns with no product filter"
	when
        $eligbleCampaigns : ArrayList()
        $campaign : CampaignBody() from $eligbleCampaigns
		orderObject: Order(payment.totalAmount > $campaign.limit, (payment.method == $campaign.getPaymentMethod() || $campaign.getPaymentMethod() == PaymentMethod.ALL))

	then
	    for(OrderItem orderItem : orderObject.getOrderItems()) {
	        Double itemPrice = orderItem.getProduct().getPrice();
            Double itemDiscount = calculateDiscount(itemPrice, $campaign, orderObject.getOrderItems().size());

            orderObject.getSimulatedPaymentOptions().add(new OrderItem(orderItem.getProduct(),
                                                        new Payment(orderObject.getPayment().getMethod(),
                                                                new Discount(
                                                                    $campaign.getBenefitType().toString(),
                                                                    itemDiscount
                                                                    ),
                                                                itemPrice,
                                                                itemPrice - itemDiscount
                                                               ),
                                                            $campaign
                                                               ));
                System.out.println(     "Campaign: "            + $campaign.getName()
                                      + " Benefit Type"         + $campaign.getBenefitType().toString()
                                      + " Benefit Discount: "   + $campaign.getBenefitAmount()
                                      + " Item Discount:"       + itemDiscount
                                      + " Item Price: "         + itemPrice
                                      + " Final Price: "        + (itemPrice - itemDiscount)
                                      + " Rule: " + 1
                                      + " Thread name: " + Thread.currentThread().getId());
	    }


        System.out.println("\n\n\n");
	end


// Kategori filtresi uygulanan kampanya (benefit tipi, miktar limiti ve ödeme metodu filtersi dahildir)
rule "Rule for campaigns with category filter"
	when
        $eligbleCampaigns : ArrayList()
        $campaign : CampaignBody() from $eligbleCampaigns
//        $hash : HashMap() from $campaign.parameters.get("categories")
//        $categories: ArrayList() from collect (ProductCategory() from $hash.values())
//        $product: Product() from $campaign.getParameters().get("products")
        $category : ProductCategory() from $campaign.getParameters().get("categories")
		orderObject: Order(payment.totalAmount > $campaign.limit, (payment.method == $campaign.getPaymentMethod() || $campaign.getPaymentMethod() == PaymentMethod.ALL))
        $orderItems: ArrayList() from  collect (OrderItem($product: product.category.id == $category.id)from orderObject.orderItems)

        Number(doubleValue > $campaign.limit) from accumulate(
                  OrderItem($price : product.getPrice()) from $orderItems,
                  sum($price)
               )


      $orderItem: OrderItem() from $orderItems
//        eval(checkOrderLimit(orderObject, $campaign.getLimit()))


	then
        int availableItemSize = $orderItems.size();

        Double itemPrice = $orderItem.getProduct().getPrice();
        Double itemDiscount = calculateDiscount(itemPrice, $campaign, availableItemSize);

        orderObject.getSimulatedPaymentOptions().add(new OrderItem($orderItem.getProduct(),
                                                    new Payment(orderObject.getPayment().getMethod(),
                                                        new Discount(
                                                                    $campaign.getBenefitType().toString(),
                                                                    itemDiscount
                                                        ),
                                                        itemPrice,
                                                        itemPrice - itemDiscount
                                                         ),
                                                        $campaign
                                                           ));

        System.out.println(     "Campaign: "            + $campaign.getName()
                              + " Benefit Type"         + $campaign.getBenefitType().toString()
                              + " Benefit Discount: "   + $campaign.getBenefitAmount()
                              + " Item Discount:"       + itemDiscount
                              + " Item Price: "         + itemPrice
                              + " Final Price: "        + (itemPrice - itemDiscount)
                              + " Rule: " + 2
                              + " Thread name: " + Thread.currentThread().getId());

        System.out.println("SIZE: " + availableItemSize);
        System.out.println("\n\n\n");

	end

// Product filtresi uygulanan kampanya (benefit tipi, miktar limiti ve ödeme metodu filtersi dahildir)
rule "Rule for campaigns with product filter"
	when
        $eligbleCampaigns : ArrayList()
        $campaign : CampaignBody() from $eligbleCampaigns
//        $hash : HashMap() from $campaign.parameters.get("products")
        $product: Product() from $campaign.getParameters().get("products")
//        $product : Product() from $products
		orderObject: Order(payment.totalAmount > $campaign.limit, (payment.method == $campaign.getPaymentMethod() || $campaign.getPaymentMethod() == PaymentMethod.ALL))
        $orderItems: ArrayList() from  collect (OrderItem(product.id == $product.getId())from orderObject.orderItems)

        Number(doubleValue > $campaign.limit) from accumulate(
                  OrderItem($price : product.getPrice()) from $orderItems,
                  sum($price)
               )

        $orderItem: OrderItem() from $orderItems
//        eval(checkOrderLimit(orderObject, $campaign.getLimit()))


	then
        int availableItemSize = $orderItems.size();

        Double itemPrice = $orderItem.getProduct().getPrice();
        Double itemDiscount = calculateDiscount(itemPrice, $campaign, availableItemSize);

        orderObject.getSimulatedPaymentOptions().add(new OrderItem($orderItem.getProduct(),
                                                    new Payment(orderObject.getPayment().getMethod(),
                                                        new Discount(
                                                                    $campaign.getBenefitType().toString(),
                                                                    itemDiscount
                                                        ),
                                                        itemPrice,
                                                        itemPrice - itemDiscount
                                                         ),
                                                        $campaign
                                                           ));

        System.out.println(     "Campaign: "            + $campaign.getName()
                              + " Benefit Type"         + $campaign.getBenefitType().toString()
                              + " Benefit Discount: "   + $campaign.getBenefitAmount()
                              + " Item Discount:"       + itemDiscount
                              + " Item Price: "         + itemPrice
                              + " Final Price: "        + (itemPrice - itemDiscount)
                              + " Rule: " + 3
                              + " Thread name: " + Thread.currentThread().getId());

        System.out.println("SIZE: " + $campaign.getParameters().get("products"));
        System.out.println("\n\n\n");

	end



// Product filtresi uygulanan kampanya (benefit tipi, miktar limiti ve ödeme metodu filtersi dahildir)
rule "Rule for campaigns with attribute filter"
	when
        $eligbleCampaigns : ArrayList()
        $campaign : CampaignBody() from $eligbleCampaigns
//        $hash : HashMap() from $campaign.parameters.get("attributes")
//        $attributes: ArrayList() from collect (ProductAttribute() from $hash.values())
//        $category : ProductCategory() from $campaign.getParameters().get("categories")
        $attribute : ProductAttribute() from $campaign.getParameters().get("attributes")
		orderObject: Order(payment.totalAmount > $campaign.limit, (payment.method == $campaign.getPaymentMethod() || $campaign.getPaymentMethod() == PaymentMethod.ALL))
        $orderItems: ArrayList() from  collect (OrderItem($product: product.attributeList contains $attribute)from orderObject.orderItems)
        Number(doubleValue > $campaign.limit) from accumulate(
                  OrderItem($price : product.getPrice()) from $orderItems,
                  sum($price)
               )

        $orderItem: OrderItem() from $orderItems
//        eval(checkOrderLimit(orderObject, $campaign.getLimit()))


	then
        int availableItemSize = $orderItems.size();

        Double itemPrice = $orderItem.getProduct().getPrice();
        Double itemDiscount = calculateDiscount(itemPrice, $campaign, availableItemSize);

        orderObject.getSimulatedPaymentOptions().add(new OrderItem($orderItem.getProduct(),
                                                    new Payment(orderObject.getPayment().getMethod(),
                                                        new Discount(
                                                                    $campaign.getBenefitType().toString(),
                                                                    itemDiscount
                                                        ),
                                                        itemPrice,
                                                        itemPrice - itemDiscount
                                                         ),
                                                        $campaign
                                                           ));

        System.out.println(     "Campaign: "            + $campaign.getName()
                              + " Benefit Type"         + $campaign.getBenefitType().toString()
                              + " Benefit Discount: "   + $campaign.getBenefitAmount()
                              + " Item Discount:"       + itemDiscount
                              + " Item Price: "         + itemPrice
                              + " Final Price: "        + (itemPrice - itemDiscount)
                              + " Rule: " + 4
                              + " Thread name: " + Thread.currentThread().getId());

        System.out.println("SIZE: " + availableItemSize);
        System.out.println("\n\n\n");

	end
